#!/bin/bash
# AWS Lambda Fan-Out Utility
# 
# Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
# 
#  http://aws.amazon.com/apache2.0
# 
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.

#
# This script is the main script for the command line utility
#

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DIR/cli/awscli.sh"
source "$DIR/cli/functions.sh"
source "$DIR/cli/targets.sh"
source "$DIR/cli/help.sh"

ACTION=
if [ $# -ne 0 ]; then
  ACTION=$1
  shift
fi

if [ "$ACTION" == "register" ]; then
  WORKER_TYPE=
  if [ $# -ne 0 ]; then
    WORKER_TYPE=$1
    shift
  fi

  readCliParams $@
  readTargetParams ${PASSTHROUGH[@]}
  if [ "$WORKER_TYPE" == "sqs" ]; then
    echo "Using SQS"
  else
    echo "Invalid target type '$WORKER_TYPE', you must specify a target type, one of" 1>&2
    echo " - sqs: for specifying an Amazon Simple Queue Service (SQS) Queue" 1>&2
    doHelp
    exit -1
  fi
  readObjectProperties ${PASSTHROUGH[@]}
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "register: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  registerFanoutTarget ${PASSTHROUGH[@]}
elif [ "$ACTION" == "update" ]; then
  readCliParams $@
  readTargetParams ${PASSTHROUGH[@]}
  readObjectProperties ${PASSTHROUGH[@]}
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "update: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  updateFanoutTarget
elif [ "$ACTION" == "activate" ]; then
  ACTIVE=true
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "activate: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  updateFanoutTarget
elif [ "$ACTION" == "deactivate" ]; then
  ACTIVE=false
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "deactivate: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  updateFanoutTarget
elif [ "$ACTION" == "unregister" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "unregister: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  unregisterFanoutTarget
elif [ "$ACTION" == "list" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "list: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  listFanoutTargets $@
elif [ "$ACTION" == "deploy" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readFunctionConfigParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "deploy: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  deployFanout
elif [ "$ACTION" == "destroy" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "destroy: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  destroyFanout
elif [ "$ACTION" == "hook" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  readSourceConfigParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "list: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  hookFanoutSource $@
elif [ "$ACTION" == "unhook" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "list: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  unhookFanoutSource $@
elif [ "$ACTION" == "pause" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "list: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  setHookFanoutSourceState inactive $@
elif [ "$ACTION" == "resume" ]; then
  readCliParams $@
  readFunctionParams ${PASSTHROUGH[@]}
  readWorkerParams ${PASSTHROUGH[@]}
  if [ ${#PASSTHROUGH[@]} -ne 0 ]; then
    echo "list: unexpected parameter ${PASSTHROUGH[@]}" 1>&2
    doHelp
    exit -1
  fi

  setHookFanoutSourceState active $@
else
  echo "Invalid action, you must specify an action" 1>&2
  doHelp
  exit -1
fi
